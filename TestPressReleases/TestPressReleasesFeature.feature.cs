// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestPressReleasesFeature")]
    public partial class TestPressReleasesFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TestPressReleasesFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestPressReleasesFeature", "Check page \'Press Releases\' for functional testing.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
            testRunner.Given("I go to page with list of Press Releases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("To count press-releases on the list after click \'Load more\'.")]
        public virtual void ToCountPress_ReleasesOnTheListAfterClickLoadMore_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To count press-releases on the list after click \'Load more\'.", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 8
          testRunner.When("Click to button \'Load more\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
       testRunner.Then("The amount of press-releases on list less than max amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check title of press-release.")]
        public virtual void CheckTitleOfPress_Release_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check title of press-release.", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 12
          testRunner.When("I get press-releases with title on the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
       testRunner.Then("Title is not null for each press-releases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check link to image of press-releases.")]
        public virtual void CheckLinkToImageOfPress_Releases_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check link to image of press-releases.", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 16
          testRunner.When("I get press-releases with link to image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
       testRunner.Then("Link to image for each press-releases is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check announcement of press-release.")]
        public virtual void CheckAnnouncementOfPress_Release_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check announcement of press-release.", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 20
          testRunner.When("I get press-releases with announcement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
       testRunner.Then("Announcement is not null for each press-releases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check link to watch PDF of press-releases.")]
        public virtual void CheckLinkToWatchPDFOfPress_Releases_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check link to watch PDF of press-releases.", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 24
          testRunner.When("I get press-releases with link to watch PDF of press-releases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
       testRunner.Then("Link to watch PDF of press-release is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check link to download PDF of press-releases.")]
        public virtual void CheckLinkToDownloadPDFOfPress_Releases_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check link to download PDF of press-releases.", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 28
          testRunner.When("I get press-releases with link to download PDF of press-releases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
       testRunner.Then("Link to download PDF of press-release is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Match title of press-release on the list and on the page of press-pelease.")]
        public virtual void MatchTitleOfPress_ReleaseOnTheListAndOnThePageOfPress_Pelease_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Match title of press-release on the list and on the page of press-pelease.", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 32
          testRunner.When("I get press-releases with title on the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
    testRunner.And("I get title of press-release on the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
       testRunner.Then("Title of press-release on the list matches up title on the page of press-pelease", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check filtering by date of press-releases.")]
        [NUnit.Framework.TestCaseAttribute("01.12.2017", "31.12.2017", null)]
        [NUnit.Framework.TestCaseAttribute("01.01.2018", "31.01.2018", null)]
        [NUnit.Framework.TestCaseAttribute("01.02.2018", "28.02.2018", null)]
        public virtual void CheckFilteringByDateOfPress_Releases_(string dateFrom, string dateTo, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check filtering by date of press-releases.", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 38
    testRunner.When(string.Format("I have filtered press-releases by date start {0} and date end {1}", dateFrom, dateTo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
    testRunner.Then("Date of press-release on the list matches up range of date into filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
